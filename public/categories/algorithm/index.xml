<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on 奇迹之流WonderfloW</title>
    <link>https://wonderflow.info/categories/algorithm/</link>
    <description>Recent content in Algorithm on 奇迹之流WonderfloW</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 05 Sep 2012 05:45:23 +0000</lastBuildDate><atom:link href="https://wonderflow.info/categories/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>我的字符串报告（AC自动机详，后缀数组无）</title>
      <link>https://wonderflow.info/posts/2012/09/05/e68891e79a84e5ad97e7aca6e4b8b2e68aa5e5918a/</link>
      <pubDate>Wed, 05 Sep 2012 05:45:23 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/09/05/e68891e79a84e5ad97e7aca6e4b8b2e68aa5e5918a/</guid>
      <description>上个学期开学的时候做的字符串报告，觉得还有些价值，做了些补充发上来，也许以后用得着。 1 KMP 1.1 概念： KMP是一种用来处理字符串匹配的算法。通俗的讲就是给你一个串A（ababababbc）和一个串B（ababbc），问你A串中是否包含B串。 解决这类问题的朴素算法就是枚举A串开始的位置，然后逐个位置对B串进行匹配。这样的算法复杂度是O（n*m）。而这里我们要介绍的KMP算法，就是解决这类问题最坏复杂度只要O（n+m）的算法。 KMP是由三个人共同提出的，他们的名字分别是Knuth、Morris、Pratt，这也是为什么这个算法叫KMP的原因，就是取了三个人的首字母。 1.2 原理： 现假设我们有两个串A（abab</description>
    </item>
    
    <item>
      <title>《编程之美》读书笔记</title>
      <link>https://wonderflow.info/posts/2012/08/28/e7bc96e7a88be4b98be7be8ee8afbbe4b9a6e7ac94e8aeb0/</link>
      <pubDate>Tue, 28 Aug 2012 12:31:10 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/08/28/e7bc96e7a88be4b98be7be8ee8afbbe4b9a6e7ac94e8aeb0/</guid>
      <description>总的来说，编程之美是一本讲面试算法的书，至于面试问算法到底问到的几率有多大，我不知道。不过这本书本身的很多问题是非常有意思的。 0.1、前言趣题： 房间里有三盏灯，屋外有三个开关，分别控制三盏灯，进了房间才能知道哪个灯泡是亮的，问只进入房间一次，怎么区分哪个开关对应哪个灯？ 这个题的有意思之处在于让你拓宽思维，不要被既定的线路束缚住。区别三个灯泡，一定需要两个条件，一个是灯泡亮否，还有一个条件哪里来呢？答案是温度，灯泡开了一会，表面温度自然就会上升。 0.2、前言感悟： 面试如考试：基础很重要，但是考前看看面试题库也是个不错的选择。 面试就是探讨：多把自己的想法告诉面试官，对问题的思考或许比问题的答案更重</description>
    </item>
    
    <item>
      <title>几种简单类型的动态规划</title>
      <link>https://wonderflow.info/posts/2012/08/08/e587a0e7a78de7ae80e58d95e7b1bbe59e8be79a84dp/</link>
      <pubDate>Wed, 08 Aug 2012 10:44:28 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/08/08/e587a0e7a78de7ae80e58d95e7b1bbe59e8be79a84dp/</guid>
      <description>今天又被鱼头拉着校验集训队的书，正好看了一下动态规划(DP)这块，顺便总结一下。发现几道POJ上的例题正好是自己没有做过的，正好拿来试试手，写写题解。 线性动态规划： 1、最长递增（减）子序列：给出一个数列，求最长不下降（上升）子序列的长度。poj2533 这个经典的DP问题有两种解法，复杂度分别为O（n^2）和O（nlogn）。 O(n^2)的算法比较容易理解，就是用dp[i]表示数列到i位置的最长递增（减）子序列的长度。 第一重循环自然就是枚举i的位置，第二重循环就是从0到i-1，选择一个数字比num[i]小（大）的数的dp值加1，看能否更新dp[i]。 以最长递增子序列为例，就是dp[i] = max(</description>
    </item>
    
    <item>
      <title>字符串的编辑距离</title>
      <link>https://wonderflow.info/posts/2012/08/07/e5ad97e7aca6e4b8b2e79a84e7bc96e8be91e8b79de7a6bb/</link>
      <pubDate>Tue, 07 Aug 2012 14:04:53 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/08/07/e5ad97e7aca6e4b8b2e79a84e7bc96e8be91e8b79de7a6bb/</guid>
      <description>编辑距离，又称Levenshtein距离（也叫做Edit Distance），是指两个字串之间，由一个转成另一个所需的最少编辑操作次数。 许可的编辑操作包括1、将一个字符替换成另一个字符；2、插入一个字符3、删除一个字符。 根据《柔性字符串匹配》一书的介绍，一共有四种方法。 1、最古老，最灵活的动态规划解法。 2、基于自动机的公式法（常用语错误距离允许较小的情况） 3、用位并行来模拟其他方法。 4、先用简单的条件过滤掉文本中大段编辑距离超过范围的不相关文本，再用其他算法进行匹配。 先介绍一下最基本的动态规划解法。空间复杂度和时间复杂度均为O（n^2）。 正好poj3356就是个这样的题目，有兴趣的可以做一下。 用</description>
    </item>
    
  </channel>
</rss>
