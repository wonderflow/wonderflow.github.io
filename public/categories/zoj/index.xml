<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zoj on 奇迹之流WonderfloW</title>
    <link>https://wonderflow.info/categories/zoj/</link>
    <description>Recent content in Zoj on 奇迹之流WonderfloW</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 22 Jul 2012 11:05:54 +0000</lastBuildDate><atom:link href="https://wonderflow.info/categories/zoj/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ZOJ1030 Farmland &amp;&amp; ZOJ1145 Dreisam Equations</title>
      <link>https://wonderflow.info/posts/2012/07/22/zoj1030-farmland-zoj1145-dreisam-equations/</link>
      <pubDate>Sun, 22 Jul 2012 11:05:54 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/07/22/zoj1030-farmland-zoj1145-dreisam-equations/</guid>
      <description>zoj1030 《Farmland》绝对是恶心人的题，题目是要求找出边长为n的多边形。但是如果途中有其他的边或者点，就不算。 做法就是枚举每一条边，然后dfs，每次选择夹角最小的点。选择完以后要对所有的点枚举，查看点是否在多边形内。最后，因为每条边都按照正向走和反向走，可能出现重复，怎么解决重复呢，算面积，面积为负的舍弃。 代码写的比较烦躁：WA了十多次，搞了好久，果然我这样的人还是不适合做计算几何的、 #include&amp;lt;iostream&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;cmath&amp;gt; #include&amp;lt;map&amp;gt; #define infinity 1e10 #define EP 1e-8 using namespace std; /* * 1.dfs出一个多边形(坐标变换，把一条边转成x轴正方向) * 2.判断多边形内是否有孤立的点，采用射线法， * (射线与多边形的交点是奇数个的时候，点在多边形内，在此之前要判断是否在线</description>
    </item>
    
    <item>
      <title>ZOJ1043 Split Windows &amp;&amp; ZOJ1100 Mondriaan&#39;s Dream</title>
      <link>https://wonderflow.info/posts/2012/07/21/zoj1043-split-windows-zoj1100-mondriaans-dream/</link>
      <pubDate>Sat, 21 Jul 2012 16:13:14 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/07/21/zoj1043-split-windows-zoj1100-mondriaans-dream/</guid>
      <description>ZOJ1043《Split Windows》是一个题目描述很长很长的题目，以至于我花了一个小时才看懂，估计也是因为看的时候不断在分心的原因吧。 题目描述的意思是，给你一颗描述矩形框如何分割的树，树的叶子结点都用字母表示，每个子树部分都用‘-’或‘|’表示如何分割。然后让你把符合该描述的最小的一种矩形分割画出来。然后还花了很多的笔墨教你如何左右大小调整，其实意思就是如果大小不一致了，按比例放大，遇到不是整数的情况，就左子树向上取整。 其实这道题目很有点当年那个画N倍长度的“X”题的翻版的感觉，就是一个递归画图。但是要先把每个子树的高度调整好。 做法： 1、建树，求每个子树的树高。 2、调整树高，遇到‘-’,</description>
    </item>
    
    <item>
      <title>&#39;ZOJ1299 Pendulum &amp;&amp; ZOJ1041 &amp;&amp; ZOJ1060 &amp;&amp; ZOJ1197 &#39;</title>
      <link>https://wonderflow.info/posts/2012/07/18/zoj1299-pendulum-zoj1041-zoj1060-zoj1197/</link>
      <pubDate>Wed, 18 Jul 2012 03:15:04 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/07/18/zoj1299-pendulum-zoj1041-zoj1060-zoj1197/</guid>
      <description>zoj1299《Pendulum》是个恶心的模拟题，也可以说是个计算几何题，就是模拟一根绳子摆动的过程，中间可能会碰到障碍物导致圆心改变等等。自己写不好，只好学学大神的代码。 #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdio&amp;gt; const double EPS = 1e-4; const int MAXN = 512; //小于 inline bool lt(double a, double b) { return a &amp;lt; b - EPS; } //大于 inline bool gt(double a, double b) { return a &amp;gt; b + EPS; } //等于 inline bool eq(double a, double b) { return fabs(a - b) &amp;lt; EPS; } int main() { int ri = 0, n, p, q; bool flag; double t, r, dr, tr, alpha, beta, gamma; //alpha:当前悬线所在弧度 //beta:当前对比过程中选出的顺时针距当前悬线最近的 //gamma:当前对比过程中第i个的弧度 double x[MAXN], y[MAXN];//所有点都存进来 while (scanf(&amp;quot;%d%lf&amp;quot;, &amp;amp;n, &amp;amp;r) != EOF &amp;amp;&amp;amp; r &amp;gt; 0) { x[0] = y[0] = 0; p = 0; alpha = -M_PI; //M_PI = acos(-1.0) 区别是这个M_PI是头文件里定义</description>
    </item>
    
    <item>
      <title>ZOJ1245 &amp;&amp; ZOJ1298 &amp;&amp; ZOJ1301</title>
      <link>https://wonderflow.info/posts/2012/07/15/zoj1245-zoj1298-zoj1301/</link>
      <pubDate>Sun, 15 Jul 2012 15:40:47 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/07/15/zoj1245-zoj1298-zoj1301/</guid>
      <description>这三题都比较简单，就放在一起了。 ZOJ1245《Triangles》是一个DP，转移就是看三角形的顶点，从上面一层它的左边和右边两个顶点转移的。或者从下面一层左右顶点转移的。 要注意的是奇偶时三角形的方向是不一样的，DP的时候，只能从是它方向的三角形转移过来。然后还有注意一下数组大小，今天就是这样WA了一下午。 ZOJ1298《Domino Effect》是一个有意思的题，问多米诺效应产生到结束一共需要的时间。其实就是个最短路，但是你不知道最终会在那条边上终止还是在点上终止，这个时候就需要枚举边，再算出结果找出一个耗时最大的，就是答案了。 ZOJ1301《The New Villa》是一个宽搜，要把因为点只有</description>
    </item>
    
    <item>
      <title>ZOJ3475 The Great Wall I(最小割)（Dinic）</title>
      <link>https://wonderflow.info/posts/2012/07/14/zoj3475-the-great-wall-ie69c80e5b08fe589b2efbc88dinicefbc89/</link>
      <pubDate>Sat, 14 Jul 2012 16:33:22 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/07/14/zoj3475-the-great-wall-ie69c80e5b08fe589b2efbc88dinicefbc89/</guid>
      <description>今天第二场组队赛，就搞出了这个题。说来去年搞了一个暑假图论网络流神马的，在自己的博客前面这么多题目解题报告里面竟然没有出现过，实在不应该。 题意： 对于王国X，存在敌对国E和附属国A，我们要建造围墙把敌对国隔开，附属国会给钱你，如果你建造的城墙把它围进去的话。当然，X城和附属国不一定要连通。这个就是和这一套题里的神题《The Great Wall II》唯一的区别了。另外题目里还说，地图以外的区域也要建造围墙隔起来。 看到我的做法和watashi发的解题报告里面的方法有所区别，觉得还是有必要写一下题解。 思路：看到这个题，基本就觉得是最小割了。为什么？感觉啊~！因为要把两个区域分开，然后分开还需要费用，很容易想到是网络流</description>
    </item>
    
    <item>
      <title>ZOJ1391 Horizontally Visible Segments &amp;&amp; ZOJ1413 2D Nim</title>
      <link>https://wonderflow.info/posts/2012/07/14/zoj1391-horizontally-visible-segments-zoj1413-2d-nim/</link>
      <pubDate>Sat, 14 Jul 2012 16:02:48 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/07/14/zoj1391-horizontally-visible-segments-zoj1413-2d-nim/</guid>
      <description>《Horizontally Visible Segments》是一个线段树的题，给你n条垂直的线，问你三条两两互不挡住但是能用横线连起来的直线对有多少。 做法就是用线段树，首先对于x坐标排序，然后对一长条染色，被覆盖住的线段部分显然不可能再被后面的线段所看见。所以只要记录当前直线被哪些线段（id）覆盖过就可以了。最后对于已经标记好颜色的标号集合，枚举任意两个，然后再枚举其中一个的标号集合里面有没有元素的标号集合包含另外一个没使用的。简单来说，就是暴力查看存不存在三个标号两两可以看见。 做法基本就是这样了。 注意点： 1、在标号颜色的时候，要用set判重。 2、写线段树的时候加个延迟标记，表示连续的、同时也是被延迟更新的</description>
    </item>
    
    <item>
      <title>&#39;ZOJ1389 Fill the Cisterns! &amp;&amp; ZOJ1425 Crossed Matchings &#39;</title>
      <link>https://wonderflow.info/posts/2012/07/13/zoj1389-fill-the-cisterns-zoj1425-crossed-matchings/</link>
      <pubDate>Fri, 13 Jul 2012 09:16:05 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/07/13/zoj1389-fill-the-cisterns-zoj1425-crossed-matchings/</guid>
      <description>“Fill the Cisterns!”这个题就是给你很多个相连通的水箱，高度体积各不相同，然后给你一定体积的水，问你最后达到的水箱高度是多少。 做法很简单，就是二分。每次枚举每个水箱，算出可以达到的容量跟标准容量比较，然后调整二分的值。注意精度即可。这个算是《狗狗四十题》里面相对简单的题了。 #include&amp;lt;iostream&amp;gt; #include&amp;lt;cstdio&amp;gt; using namespace std; #define EPS 1e-6 struct Node { int b,h,w,d; }node[50100]; int water; int n; bool calc(double m) { double sum = 0; for(int i=0;i&amp;lt;n;i++) { if(node[i].b&amp;lt;m) { if(m&amp;gt;node[i].b+node[i].h) sum+=node[i].h*node[i].w*node[i].d; else sum+=node[i].w*node[i].d*(m-node[i].b); } } if(sum&amp;gt;=water)return true; return false; } int main() { int T; scanf(&amp;quot;%d&amp;quot;,&amp;amp;T); while(T--) { scanf(&amp;quot;%d&amp;quot;,&amp;amp;n); double total=0; for(int i=0;i&amp;lt;n;i++) { scanf(&amp;quot;%d%d%d%d&amp;quot;,&amp;amp;node[i].b,&amp;amp;node[i].h ,&amp;amp;node[i].w,&amp;amp;node[i].d); total+=node[i].h*node[i].w*node[i].d; } scanf(&amp;quot;%d&amp;quot;,&amp;amp;water); double l=0,r=10e9; double mid; if(water&amp;gt;total) { printf(&amp;quot;OVERFLOW\n&amp;quot;); continue; } while(l&amp;lt;r) { mid = (l+r)/2; if(calc(mid))r = mid-0.001; else l = mid+0.001; } printf(&amp;quot;%.2lf\n&amp;quot;,l); } return 0; } “Crossed Matchings”是个有意思的题目，给你上下各一列数，让你进行匹配。规则是数字相同的才可以匹配，且每个数字只可以被匹配一次</description>
    </item>
    
    <item>
      <title>ZOJ1426 Counting Rectangles &amp;&amp; ZOJ1387 Decoding Morse Sequences</title>
      <link>https://wonderflow.info/posts/2012/07/13/zoj1426-counting-rectangles-zoj1387-decoding-morse-sequences/</link>
      <pubDate>Fri, 13 Jul 2012 08:31:13 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/07/13/zoj1426-counting-rectangles-zoj1387-decoding-morse-sequences/</guid>
      <description>Counting Rectangles 这题一开始都没人做，其实就是个水题。因为题目中说的很清楚，只会有垂直和水平的线。这个时候，我们可以枚举任意两条横线，对于每条竖线，看有多少竖线跟这两条横线相交，设相交数为tmp。最后对于这两条横线和所有的竖线构成的矩形个数就是(temp-1)*temp/2（一个框构成的矩形有temp-1个，两个框构成的矩形有temp-2个。。以此类推至1个）。这样就能在N^3的复杂度内算出所有矩形个数了。 /* 枚举任意两条横线，对于每条竖线，看有多少竖线跟这两条横线相交，设相交数为tmp 最后对于这两条横线和所有的竖线构成的矩形个数就是(temp-1)*temp/2 这样就能在N^3的复杂度内算出所有矩形个数了。</description>
    </item>
    
    <item>
      <title>ZOJ1462 Team Them Up! &amp;&amp; ZOJ1066 Square Ice</title>
      <link>https://wonderflow.info/posts/2012/07/12/zoj1462-team-them-upzoj1066-square-ice/</link>
      <pubDate>Thu, 12 Jul 2012 11:56:25 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/07/12/zoj1462-team-them-upzoj1066-square-ice/</guid>
      <description>今天似乎是被《team them up》虐了一天啊。昨天就知道了解法，就是一直wa。中间还去把当年正常比赛官方数据下载下来对比了一下。结果发现zoj和poj的数据竟然是加强了的。。。。 说下题意：一堆人要分班级，人与人之间有的互相认识，有的不认识。现在只有两个班，但是我分班级有限制条件。 1、一个班级的同学都要互相认识。 2、一个班级里一定要至少有一个人。 3、两个班级里的人数要尽可能靠近 看到这个题可能会没有什么想法。比如我就是这样。然后根据以前的经验，从小数据开始，如果1个人的话怎么分，2个人的话怎么分等等。后来发现这个不存在一个递推关系，因为人之间还有图的关系。 然后就问了一下薛斌怎么想的，发现他的思路很好。</description>
    </item>
    
    <item>
      <title>ZOJ1448 Pattern Matching Using Regular Expression（大自然题！）</title>
      <link>https://wonderflow.info/posts/2012/07/10/zoj1448-pattern-matching-using-regular-expressionefbc88e5a4a7e887aae784b6e9a298efbc81efbc89/</link>
      <pubDate>Tue, 10 Jul 2012 16:59:50 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/07/10/zoj1448-pattern-matching-using-regular-expressionefbc88e5a4a7e887aae784b6e9a298efbc81efbc89/</guid>
      <description>狗狗四十题里面的这个题非常有意思，号称“大自然”题。其实就是模拟简单正则匹配的规则，录入模式串和匹配串，把最左最长的匹配子串输出出来。 一开始没有什么思路，后来看了watashi的代码，才发现了做法。话说watashi的那个《狗狗40题搞完纪念》绝对是个神贴啊。上面的代码资源，太可贵了！ 具体做法是： 先扫模式串，把模式串的规则整理出来。把一些规则统一起来，如&amp;quot;.&amp;ldquo;的规则，统一为字符0~256之间的任意字符，就是跟【1-9】这种一样咯。 然后用dp[i]表示从i开始作为匹配的头，最后面能匹配到的位置。 最后不得不说，这题还是相当恶心的，模式串从后往前开始对匹配串进行匹配是为了无后效</description>
    </item>
    
    <item>
      <title>ZOJ1509 Family(高精度，DP，拓扑排序)</title>
      <link>https://wonderflow.info/posts/2012/07/09/160/</link>
      <pubDate>Mon, 09 Jul 2012 15:35:33 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/07/09/160/</guid>
      <description>这题确实是个好题目。讲的是动物家族，每个人都有50%父亲的基因和50%母亲的基因，然后给你一张家族图，最后询问你指定的两个人中有相同的血缘关系的百分比是多少。 一开始其实是没什么想法的。就问了问老高，后来才知道，原来是个DP。 为了无后效性，所以我们必须要先进行拓扑排序，这样的话，先把祖先之间的血缘关系求出来，然后子孙后代的寻缘关系其实可以递推到子孙的其中一人与另外一人上一辈的血缘关系的。 首先dp[i][j]表示，第i个人和第j个人的基因相同的比例是多少。 然后dp[i][i]肯定是初始化为1的。 另外，从拓扑排序后的先祖开始计算DP值，那么两重for循环，i在j前面。也就是j肯定比i的备份小，那么要</description>
    </item>
    
    <item>
      <title>ZOJ1237 Fans and Gems（搜索？模拟？恶心的题。。）</title>
      <link>https://wonderflow.info/posts/2012/07/09/zoj-fans-and-gemsefbc88e6909ce7b4a2efbc9fe6a8a1e68b9fefbc9fe681b6e5bf83e79a84e9a298e38082e38082efbc89/</link>
      <pubDate>Mon, 09 Jul 2012 05:52:34 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/07/09/zoj-fans-and-gemsefbc88e6909ce7b4a2efbc9fe6a8a1e68b9fefbc9fe681b6e5bf83e79a84e9a298e38082e38082efbc89/</guid>
      <description>此题的类型应该就是一个暴力搜索，但是搜索的变换过程非常之恶心。一旦处理不好，就是多写上百行代码的事情。 自己写了五个小时，写不下去了，因为实在恶心到了，处理的方法不好。最后一看watashi的代码，羞愧的五体投地，就把自己的代码人道毁灭了！ 那就学学watashi大牛的代码吧。也挺好。说明一下，代码都是watashi的，我自己只是做了一些适当的注释。其中用的什么样的方法，基本注释里面已经写的很清楚。看来暴力的题目，熟练使用STL才是王道啊。 再结合昨天看watashi代码的经验就是： 该暴力的题，全部使用STL，让代码清楚简洁干净利落到极致！ 该高效的题，尽量使用位运算，不让任何多余的操作降低自己程序的</description>
    </item>
    
    <item>
      <title>ZOJ1506 Left labyrinths &amp;&amp; ZOJ1518 This Sentence is False</title>
      <link>https://wonderflow.info/posts/2012/07/08/zoj1506-left-labyrinths-zoj1518-this-sentence-is-false/</link>
      <pubDate>Sun, 08 Jul 2012 15:57:51 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/07/08/zoj1506-left-labyrinths-zoj1518-this-sentence-is-false/</guid>
      <description>今天把第一场定时训练训练的C和E都过了，都是不错的题目。 Left labyrinths讲的是一个迷宫，你进入迷宫后要遵守规则，优先靠右走。然后问你最后能否到中央大厅。 我感觉有这样几个注意点： 1、迷宫的入口如何搜寻：就是左右是‘#’但是上下是‘.’的点或者反过来。 2、迷宫的大厅什么时候算走到了？找到田字格的‘.’块，注意22就算了，我一开始想象着要33才算，果断WA了。 3、规则说靠右走，但是没说只能靠右走，其实必要的时候还是要往别的方向走的。 4、每个格子不是只能走一次，而是每个格子的每个方向只能走一次。 有了这几个注意点，基本上AC就没问题了。这题主要是题目理解上的问题了吧，一开始我无论怎样都WA，后来去</description>
    </item>
    
    <item>
      <title>&#39;ZOJ1460 The Partition of a Cake &#39;</title>
      <link>https://wonderflow.info/posts/2012/07/07/zoj1460-the-partition-of-a-cake/</link>
      <pubDate>Sat, 07 Jul 2012 04:19:58 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/07/07/zoj1460-the-partition-of-a-cake/</guid>
      <description>这真是过的艰辛的一题啊。搞ACM搞到了最后一年，就决定碰到的每道题都不能错过，尤其是好题目。以前总是想着，放着吧，以后研究到的时候总归会做到的。熟不知以后也会遇到新的题目，一直这样推给以后，其实只是欺骗自己而已。所以，哪怕明知其难，也要迎难而上。 果然不出所料，对于我这个计算几何小白，果然搞了很久才搞定。一开始是想着自己找规律的，但是自己找到的规律也没有自己证明，其实就是YY的，果然不出所料，WA了。然后问HJWAJ怎么做，才知道了方法。就是对于一个空间，每切一刀增加的空间数，就等于点数加一。 关于这一个规律的证明，其实想象一下就可以了。如果没有交点，那么显然是一刀把原来切的哪个平面分成两个。如果</description>
    </item>
    
    <item>
      <title>ZOJ1504 Slots of Fun &amp;&amp; ZOJ1423 (Your)((Term)((Project)))</title>
      <link>https://wonderflow.info/posts/2012/07/06/zoj1504-slots-of-fun-zoj1423-yourtermproject/</link>
      <pubDate>Fri, 06 Jul 2012 06:35:07 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/07/06/zoj1504-slots-of-fun-zoj1423-yourtermproject/</guid>
      <description>最近教练出的每日早晚一小时定时训练，出的都是狗狗40的套题里面的题目，觉得很好，有必要都AC一遍，慢慢来吧。 Slots of Fun 这题，一开始想了40分钟，不知道怎么快速计算每个点的坐标，结果最后才想到，只要扫的时候用两重循环扫替代线性的扫描，就可以快速定位一个点的坐标了。（果然智商是硬伤啊！！） 然后常规的方法就是用sqrt（3）这样的把每个点相对于起始点的坐标计算出来，然后用eps比较是否相等。 后来小翟告诉我一个方法，非常简单，就是使用余弦定理，如果一个点的坐标(x,y)表示的是第几排，第几个数字的话，那么A,B两点之间的距离其实就是dis^2 = (xa-xb)^2+(ya-yb)^2+2*|xa-xb|*|</description>
    </item>
    
  </channel>
</rss>
