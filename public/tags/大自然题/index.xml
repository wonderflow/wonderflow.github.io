<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>大自然题 on 奇迹之流WonderfloW</title>
    <link>https://wonderflow.info/tags/%E5%A4%A7%E8%87%AA%E7%84%B6%E9%A2%98/</link>
    <description>Recent content in 大自然题 on 奇迹之流WonderfloW</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 10 Jul 2012 16:59:50 +0000</lastBuildDate><atom:link href="https://wonderflow.info/tags/%E5%A4%A7%E8%87%AA%E7%84%B6%E9%A2%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ZOJ1448 Pattern Matching Using Regular Expression（大自然题！）</title>
      <link>https://wonderflow.info/posts/2012/07/10/zoj1448-pattern-matching-using-regular-expressionefbc88e5a4a7e887aae784b6e9a298efbc81efbc89/</link>
      <pubDate>Tue, 10 Jul 2012 16:59:50 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/07/10/zoj1448-pattern-matching-using-regular-expressionefbc88e5a4a7e887aae784b6e9a298efbc81efbc89/</guid>
      <description>狗狗四十题里面的这个题非常有意思，号称“大自然”题。其实就是模拟简单正则匹配的规则，录入模式串和匹配串，把最左最长的匹配子串输出出来。 一开始没有什么思路，后来看了watashi的代码，才发现了做法。话说watashi的那个《狗狗40题搞完纪念》绝对是个神贴啊。上面的代码资源，太可贵了！ 具体做法是： 先扫模式串，把模式串的规则整理出来。把一些规则统一起来，如&amp;quot;.&amp;ldquo;的规则，统一为字符0~256之间的任意字符，就是跟【1-9】这种一样咯。 然后用dp[i]表示从i开始作为匹配的头，最后面能匹配到的位置。 最后不得不说，这题还是相当恶心的，模式串从后往前开始对匹配串进行匹配是为了无后效</description>
    </item>
    
  </channel>
</rss>
