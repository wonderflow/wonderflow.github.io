<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>oam on 奇迹之流WonderfloW</title>
    <link>https://wonderflow.info/tags/oam/</link>
    <description>Recent content in oam on 奇迹之流WonderfloW</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 30 Mar 2020 21:54:33 +0800</lastBuildDate><atom:link href="https://wonderflow.info/tags/oam/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OAM v1alpha2 新版：平衡标准与可扩展性</title>
      <link>https://wonderflow.info/posts/oam-v1alpha2/</link>
      <pubDate>Mon, 30 Mar 2020 21:54:33 +0800</pubDate>
      
      <guid>https://wonderflow.info/posts/oam-v1alpha2/</guid>
      <description>OAM Spec 经历了近 3 个月的迭代，v1alpha2 版本终于发布啦。新版本在坚持 OAM Spec 平台无关的基础上，整体变得更 Kubernetes 友好化，很大程度上平衡了标准与可扩展性，更好的支持 CRD。如果你已经编写了现成的 CRD Operator，可以平滑的接入到 OAM 体系中，并且享受到 OAM 模型的红利。 目前 OAM 已经成为了包括阿里、微软、Upbond、谐云等多家公司构建云产品的核心架构。他们通过 OAM 构建了“以应用为中心”、用户友好化的 Kubernetes PaaS；充分发挥 OAM 的标准化与可扩展性，实现 OAM 核心Controller的同时，快速接入了已有的 Operator 能力；通过 OAM 横向打通多个模块，破除了原有 Operator 彼此孤立、无法复用的窘境。 了解 OAM 的背景及由来，可以参考文章《深度解读 - 阿里巴巴</description>
    </item>
    
    <item>
      <title>Heroku 的“得”与“失”</title>
      <link>https://wonderflow.info/posts/heroku/</link>
      <pubDate>Mon, 10 Feb 2020 21:58:54 +0800</pubDate>
      
      <guid>https://wonderflow.info/posts/heroku/</guid>
      <description>&lt;p&gt;2011年，Heroku 的联合创始人  Adam Wiggins 根据针对上百万应用托管和运维的经验，发布了著名的 &lt;a href=&#34;https://12factor.net/&#34;&gt;“十二要素应用宣言（The Twelve-Factor App）”&lt;/a&gt;。不知那时候他们有没有想到，这份宣言会在今后数年时间里，成为 SaaS 应用开发的启蒙书。同时也奠定了 Heroku 在 PaaS 领域的地位，成为了云上应用开发规范化的基石。&lt;/p&gt;
&lt;p&gt;Heroku 无疑是一家伟大的公司，它关注应用与开发者，“以应用为中心”的理念让我们至今受益。然而在过去这一两年里，我们看到许多 Heroku 的用户开始寻找别的选择。这不禁让我们好奇，站在“云原生”如火如荼的今天回望过去，Heroku 的“得”与“失”究竟在哪里？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes 会不会“杀死” DevOps？</title>
      <link>https://wonderflow.info/posts/2019-12-31-k8s-kill-paas/</link>
      <pubDate>Tue, 31 Dec 2019 19:41:43 +0800</pubDate>
      
      <guid>https://wonderflow.info/posts/2019-12-31-k8s-kill-paas/</guid>
      <description>DevOps 这个概念最早是在 2007 年提出的，那时云计算基础设施的概念也才刚刚提出没多久，而随着互联网的逐渐普及，应用软件的需求爆发式增长，软件开发的理念也逐渐从瀑布模型（waterfall）转向敏捷开发（agile）。传统的软件交付模式（应用开发人员专注于软件开发、IT运维人员负责将软件部署到服务器运行），再也无法满足互联网软件快速迭代的需求。于是，DevOps 作为一种打破研发和运维之间隔阂、加快软件交付流程、提高软件交付质量的文化理念和最佳实践逐渐普及至今。 DevOps 的现状 DevOps 的流行得益于业界对于应用软件敏捷开发、高质量交付的诉求，所以为开发和运维开辟了一块“公共的空间”，让双方可以在这里紧密合作。那时软件研发依旧</description>
    </item>
    
  </channel>
</rss>
