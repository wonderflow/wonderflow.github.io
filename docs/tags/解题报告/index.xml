<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>解题报告 on 奇迹之流WonderfloW</title>
    <link>https://wonderflow.info/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</link>
    <description>Recent content in 解题报告 on 奇迹之流WonderfloW</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 08 Aug 2012 10:44:28 +0000</lastBuildDate><atom:link href="https://wonderflow.info/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>几种简单类型的动态规划</title>
      <link>https://wonderflow.info/posts/2012/08/08/e587a0e7a78de7ae80e58d95e7b1bbe59e8be79a84dp/</link>
      <pubDate>Wed, 08 Aug 2012 10:44:28 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/08/08/e587a0e7a78de7ae80e58d95e7b1bbe59e8be79a84dp/</guid>
      <description>今天又被鱼头拉着校验集训队的书，正好看了一下动态规划(DP)这块，顺便总结一下。发现几道POJ上的例题正好是自己没有做过的，正好拿来试试手，写写题解。 线性动态规划： 1、最长递增（减）子序列：给出一个数列，求最长不下降（上升）子序列的长度。poj2533 这个经典的DP问题有两种解法，复杂度分别为O（n^2）和O（nlogn）。 O(n^2)的算法比较容易理解，就是用dp[i]表示数列到i位置的最长递增（减）子序列的长度。 第一重循环自然就是枚举i的位置，第二重循环就是从0到i-1，选择一个数字比num[i]小（大）的数的dp值加1，看能否更新dp[i]。 以最长递增子序列为例，就是dp[i] = max(</description>
    </item>
    
    <item>
      <title>字符串的编辑距离</title>
      <link>https://wonderflow.info/posts/2012/08/07/e5ad97e7aca6e4b8b2e79a84e7bc96e8be91e8b79de7a6bb/</link>
      <pubDate>Tue, 07 Aug 2012 14:04:53 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/08/07/e5ad97e7aca6e4b8b2e79a84e7bc96e8be91e8b79de7a6bb/</guid>
      <description>编辑距离，又称Levenshtein距离（也叫做Edit Distance），是指两个字串之间，由一个转成另一个所需的最少编辑操作次数。 许可的编辑操作包括1、将一个字符替换成另一个字符；2、插入一个字符3、删除一个字符。 根据《柔性字符串匹配》一书的介绍，一共有四种方法。 1、最古老，最灵活的动态规划解法。 2、基于自动机的公式法（常用语错误距离允许较小的情况） 3、用位并行来模拟其他方法。 4、先用简单的条件过滤掉文本中大段编辑距离超过范围的不相关文本，再用其他算法进行匹配。 先介绍一下最基本的动态规划解法。空间复杂度和时间复杂度均为O（n^2）。 正好poj3356就是个这样的题目，有兴趣的可以做一下。 用</description>
    </item>
    
    <item>
      <title>2012多校第一、第二场（hdu4300~hdu4319）</title>
      <link>https://wonderflow.info/posts/2012/07/27/2012e5a49ae6a0a1e7acace4b880e38081e7acace4ba8ce59cbaefbc88hdu4300hdu4319efbc89/</link>
      <pubDate>Fri, 27 Jul 2012 12:59:12 +0000</pubDate>
      
      <guid>https://wonderflow.info/posts/2012/07/27/2012e5a49ae6a0a1e7acace4b880e38081e7acace4ba8ce59cbaefbc88hdu4300hdu4319efbc89/</guid>
      <description>说一下自己搞出来的题目吧，感觉多校其实比较水的，题目也不难，模板题，陈题很多，不过两场我们队的名次都很烂诶，30开外了都，抗不住啊！出现的问题就是队里的模板太少、不全。不过也好，做一场补一场的模板。 hdu4300《Clairewd’s message》是个字符串，利用next数组求解，小trick就是next数组求出来的值要小于(len-1)/2才取。即：while(len-next[dx]&amp;lt;=(len-1)/2)dx = next[dx]; #include&amp;lt;iostream&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;cstdio&amp;gt; using namespace std; int map[30]; int len; int s[101000]; int next[101000]; char str[101000]; void get_next() { int i,j;i=0;next[0]=-1;j=-1; while(i&amp;lt;len) { if(j==-1||map[s[j]]==s[i]) { ++i;++j; next[i]=j; } else j=next[j]; } } int main() { int T; scanf(&amp;#34;%d&amp;#34;,&amp;amp;T); while(T--){ scanf(&amp;#34;%s&amp;#34;,str); len = strlen(str); for(int i=0;i&amp;lt;len;i++){ map[str[i]-&amp;#39;a&amp;#39;] = i; } scanf(&amp;#34;%s&amp;#34;,str); len = strlen(str); for(int i=0;i&amp;lt;len;i++){ s[i] = str[i] - &amp;#39;a&amp;#39;; } get_next(); // cout&amp;lt;&amp;lt;next[len]&amp;lt;&amp;lt;endl; int dx = len; while(len-next[dx]&amp;lt;=(len-1)/2)dx = next[dx]; // cout&amp;lt;&amp;lt;next[dx]&amp;lt;&amp;lt;endl; for(int i=0;i&amp;lt;len-next[dx];i++){ printf(&amp;#34;%c&amp;#34;,s[i]+&amp;#39;a&amp;#39;); } for(int i=0;i&amp;lt;len-next[dx];i++){ printf(&amp;#34;%c&amp;#34;,map[s[i]]+&amp;#39;a&amp;#39;); } printf(&amp;#34;\n&amp;#34;); } return 0;</description>
    </item>
    
  </channel>
</rss>
